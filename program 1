import heapq

# Define the goal state
goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

class PuzzleNode:
    def __init__(self, state, parent=None, move=None, depth=0):
        self.state = state
        self.parent = parent
        self.move = move
        self.depth = depth
        self.cost = self.heuristic_cost()

    def __lt__(self, other):
        return self.cost < other.cost

    def __eq__(self, other):
        return self.state == other.state

    def __hash__(self):
        return hash(str(self.state))

    def heuristic_cost(self):
        # Manhattan distance heuristic
        cost = 0
        for i in range(3):
            for j in range(3):
                if self.state[i][j] != 0:
                    goal_i, goal_j = divmod(self.state[i][j] - 1, 3)
                    cost += abs(i - goal_i) + abs(j - goal_j)
        return cost + self.depth

    def get_neighbors(self):
        i, j = self.get_blank_position()
        neighbors = []
        for di, dj in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
            ni, nj = i + di, j + dj
            if 0 <= ni < 3 and 0 <= nj < 3:
                new_state = [row[:] for row in self.state]
                new_state[i][j], new_state[ni][nj] = new_state[ni][nj], new_state[i][j]
                neighbors.append(PuzzleNode(new_state, parent=self, move=(ni, nj), depth=self.depth + 1))
        return neighbors

    def get_blank_position(self):
        for i in range(3):
            for j in range(3):
                if self.state[i][j] == 0:
                    return i, j

def solve_8_puzzle(initial_state):
    initial_node = PuzzleNode(initial_state)
    frontier = [initial_node]
    visited = set()

    while frontier:
        current_node = heapq.heappop(frontier)
        visited.add(current_node)

        if current_node.state == goal_state:
            return current_node

        for neighbor in current_node.get_neighbors():
            if neighbor not in visited:
                heapq.heappush(frontier, neighbor)

    return None

def print_solution(solution_node):
    steps = []
    current_node = solution_node
    while current_node:
        steps.append(current_node.state)
        current_node = current_node.parent

    print("Solution steps:")
    for i in range(len(steps) - 1, -1, -1):
        print("\n".join(" ".join(map(str, row)) for row in steps[i]))
        print()

# Example usage:
initial_state = [
    [1, 2, 3],
    [4, 5, 6],
    [0, 7, 8]
]

solution_node = solve_8_puzzle(initial_state)

if solution_node:
    print("Solution found!")
    print_solution(solution_node)
else:
    print("No solution found!")
